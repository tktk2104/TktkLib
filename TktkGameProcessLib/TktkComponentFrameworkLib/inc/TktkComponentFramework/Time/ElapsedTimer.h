#ifndef ELAPSED_TIMER_H_
#define ELAPSED_TIMER_H_

#include <ctime>

namespace tktk
{
	class ElapsedTimer
	{
	public:

		ElapsedTimer();
		~ElapsedTimer() {}

		ElapsedTimer(const ElapsedTimer& other) = delete;
		ElapsedTimer& operator = (const ElapsedTimer& other) = delete;

	public:

		void reset();

		void frameBegin();

		// 前フレームとの時間の差を求める
		float deltaTime() const;

		// 前フレームとの時間の差を求める（TimeScaleを無視）
		float noScaleDeltaTime() const;

		// プログラムが起動してからの時間（秒）を返す
		float getCurTimeSec();

		// 最大のdeltaTimeの値を設定（正の数）
		void setMaximumDeltaTime(float maximumDeltaTime);

		// 時間の経過速度割合を取得する
		float getTimeScale();

		// 時間の経過速度割合を設定する（0.0〜float_max）
		void setTimeScale(float timeScaleRate);

		// 瞬間的なFPSを取得する
		float fps();

	private:

		// プログラムの開始時間
		std::clock_t m_startTime;

		// 前フレームの時間
		std::clock_t m_preTime;

		// 合計時間
		float m_totalTime;

		// 前フレームとの時間の差
		float m_deltaTime;

		// 最大のdeltaTimeの値
		float m_maximumDeltaTime{ 0.1f };

		// 時間の経過速度割合
		float m_timeScaleRate{ 1.0f };
	};
}
#endif // !ELAPSED_TIMER_H_